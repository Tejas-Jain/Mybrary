Create Author Route
Basics:-
1.  Only functions can be Async and not the objects its declaration it creation etc like object in next-next line
2.  Functions are of two types:- 
    i.  User Defined Functions
    ii. Inbuilt/System Defined functions
3.  We don't have the problem of ordering the various functions in User Defined functions as in these functions 
     we can directly invoke/call the second function in the defination of first function, and invoke third function in 
     the defination of second function and so on. {See the Method X of Try Example}. Hence concept of Function Callback/Promises/Async Await is not required at all
4.   Main confusion and complexity in Async Order comes in System Defined inbuilt functions as in these we don't know or have 
     access to the Defination of these functions. And even if someway we get access to the defination of these functions we can't edit their defination to suit our order of execution of our functions.
5.   This problem is solved using callbacks, in callbacks we pass a our function as an argument(called Callback function) during invoking/calling of the inbuilt function
     Now this function(callback) is passed to the defination of inbuilt function and is invoked at suitable place(which is already defined in the function). Actually the variable representing
     that function is already placed in the defination of function at the suitable place like where the process of the function is completed and place is appropriate to call the next function, place
     where the appropriate error is needed to be displayed using the (lets suppose error callback) function. 
6*.  All the inbuilt functions have "Atleast One Atleast One Callback function and can have any number of CallBack functions"
(Imp)Inbuilt function have so "Because Through that Atleast one Callback function That Inbuilt function is asking what Next is to be 
     Executed/Invoked/Called after it(inbuilt function) has finished executing and reach its end."
     Therefore as the number of inbuilt function increases within the callback function the nesting and complexity will increase with 
     with each inbuilt function.
FOR REAL EXAMPLE SEE {router.post('/AddAuthor')} below
   // ILLUSTRATION: inbuiltFunction((par1,par2)=>{        //ana. router.post('./AddAuthor',(req,res)=>{
   //   Operation 1;                                    //ana. const author= new Author({
   //   Operation 2;
   //   inbuiltFunction2((par3, par4)=>{            //this like author.save((err,newAuthor)=>{
   //         inbuiltFunction3((err,xyz)=>{
   //           inbuiltFunction4((par5)=>{
   //             Operation 3;
   //           })
   //         })
   //   })
   // })
   //THIS ABOVE LOOKING COMPLEX STRUCTURE IS ACTUALLY CALLED "CALLBACK HELL".
Note: we can choose to not pass any callback function to an inbuilt function but it is not a good practiCe bcoz in that way the error and 
      and other important things will not be properly handled.
             ASYNC AWAIT
7.  To simplify this nesting and complexity of CallBack Hell we uses Async Await format in this we just need a parent function which to which we assign 
    Async Keyword. Next we list all the functions whether UserDefined or SystemDefined(Inbuilt) in their Order of execution by just adding Await keyword 
    Before their names Signifying that Other functions in Order(in line or in Queue) have to "Wait" for the completion of the previous function in order 
    In this Way the nesting of the callbacks in the inbuilt function will be made into consecutive lines of code in an order.
    BUT THIS Async-Await THEMSELF REQUIRE 2-3 LINES TOGETHER WITH try-catch combination, SO ALWAYS USE SIMPLE CALLBACK IN CASE OF 
    1 FUNCTION IS INVOLVED./FOR REAL EXAMPLE SEE router.get('/SearchAuthor') function above.
   // ILLUSTRATION: ABOVE CODE CAN BE WRITTEN AS: 
   //   inbuiltFunciton(async (par1 ,par2)=>{
   //     Operation 1;
   //     Operation 2;
   //     await inbuiltFunction2(par3, par4);
   //     const xyz= await inbuiltFunction3(err);
   //     await inbuiltFunction4(par5);
   //     Opertion 3;
   //   })
Note: Note that for Async Await to work we need Atleast one function as Parent function on which we can apply Async Keyword
   So the root functions of the Page like router.post and router.get can't be Used in Async-Await form and we have to pass
   atleast one Callback(req,res)=>for these functions, this is obvious bcoz they don't have any parent function and if we
   wrap them inside a parent function then how can they be called, we always have to invoke that wrapper function and can't 
   access that main router.get or router.post function directly and hence fails.
*8. Again Remember: For functions having just one Callback it's best to use Callback Method instead of Async-Await,try-catch combination
                                 //Other Reference is the Try Example Practice Page//